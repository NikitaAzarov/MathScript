#pragma once
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

typedef enum TokenType {
    NUMBER, // [0-9]

    PLUS,   // +
    MINUS,  // -
    STAR,   // *
    SLASH,  // /
    LPAREN, // (
    RPAREN, // )
    TOKEN_EOF     // \0
 } TokenType;

typedef struct Token {
    TokenType type;
    char* value;
}Token;

Token* token_initialize(TokenType type, char* value);
void token_print(Token* token);


Конечно, вот перевод:

1. הגדרה כללית
	•	Brute force (בעברית: “כוח גס”) הוא שיטה לפתרון בעיות או לביצוע התקפות המבוססת על ניסיון כל האפשרויות אחת אחרי השנייה.
	•	בתחום התכנות ואבטחת המידע, brute force משמש לעיתים קרובות לניסיון לפצח סיסמאות, מפתחות הצפנה או לפתור בעיות קומבינטוריות.

2. איך עובד brute force?
	•	האלגוריתם מנסה באופן שיטתי את כל הקומבינציות האפשריות של קלט (למשל, תווים בסיסמה).
	•	כשמדובר בנתונים בטווח קטן, brute force יכול להיות יעיל, אך עבור בעיות מורכבות היעילות שלו יורדת משמעותית עקב העלייה במספר האפשרויות.

3. יתרונות השיטה
	•	פשטות הביצוע: brute force דורש ידע מינימלי על הבעיה מעבר להבנת טווח האפשרויות.
	•	פתרון מובטח (תיאורטי): אם יש זמן ומשאבים בלתי מוגבלים, brute force ימצא בסופו של דבר את הפתרון הנכון.

4. חסרונות השיטה
	•	חוסר יעילות: זמן הביצוע גדל באופן אקספוננציאלי ככל שהבעיה נעשית מסובכת יותר.
	•	עלות גבוהה של משאבים: brute force דורש כוח מחשוב וזמן רבים.

5. דוגמאות לשימושים
	•	אבטחת מידע: התקפות על סיסמאות ומפתחות הצפנה (למשל, ניסיונות לפצח קוד PIN).
	•	תכנות: פתרון בעיות כמו “בעיית התרמיל” או חיפוש פתרונות במשחקי שחמט.
	•	קריפטוגרפיה: בדיקת עמידותם של אלגוריתמי הצפנה.

6. כיצד להתגונן מפני התקפות brute force
	•	שימוש בסיסמאות ארוכות ומורכבות (מגדיל את מספר הקומבינציות האפשריות).
	•	הגבלת מספר ניסיונות הכניסה (למשל, נעילת חשבון לאחר 3-5 ניסיונות שגויים).
	•	שימוש ב-CAPTCHA למניעת התקפות אוטומטיות.
	•	הטמעת אימות דו-שלבי (MFA).

7. חלופות ל-brute force
	•	אלגוריתמים חכמים יותר כמו אלגוריתמים חמדניים, תכנות דינמי או חיפוש עם חזרה לאחור (backtracking).
	•	שימוש בניתוח והיוריסטיקות לצמצום מרחב החיפוש.

8. עובדות מעניינות
	•	brute force אינו משמש רק תוקפים, אלא גם מומחי אבטחה לבדיקת עמידות של מערכות.
	•	התקפות brute force שהצליחו בעבר הדגישו את החשיבות של שימוש בסיסמאות מורכבות.

בהצלחה עם ההגשה שלך! אם תרצה דוגמא לקוד המראה איך brute force עובד, תוכל לבקש ואשמח לעזור.


מה זה Brute Force?

1. הגדרה של Brute Force

Brute Force (בעברית: “כוח גס”) הוא שיטה לפתרון בעיות שמתבססת על ניסוי כל האפשרויות הקיימות עד למציאת פתרון מתאים. שיטה זו נפוצה במיוחד בתכנות, קריפטוגרפיה ובדיקות תוכנה.

2. עקרון הפעולה

שיטת Brute Force עובדת כך:
	•	בדיקה של כל הצירופים האפשריים של נתוני הקלט.
	•	בחינה של כל צירוף האם הוא עונה על הדרישות.
	•	עצירה כאשר נמצא הפתרון או לאחר סיום הבדיקה של כל האפשרויות.

דוגמה: פריצה של סיסמה באמצעות Brute Force כוללת ניסיון של כל הצירופים האפשריים של תווים עד שמוצאים את הסיסמה הנכונה.

3. יתרונות
	•	פשוטה למימוש.
	•	מבטיחה מציאת פתרון אם קיים כזה.

4. חסרונות
	•	מורכבות חישובית גבוהה: זמן הביצוע גדל בצורה מעריכית ככל שמספר האפשרויות גדל.
	•	צריכת משאבים גבוהה (זמן ואנרגיה).
	•	לא יעילה בבעיות עם מספר גדול מאוד של אפשרויות.

5. שימושים נפוצים
	•	קריפטוגרפיה: שיטת Brute Force משמשת לניסיון לפצח מפתחות הצפנה (למשל, התקפה על אלגוריתמים חלשים).
	•	בדיקות תוכנה: השיטה משמשת למציאת באגים באמצעות בדיקת כל התרחישים האפשריים.
	•	פתרון בעיות בתכנות: לפעמים משתמשים ב-Brute Force כגישה בסיסית אם אין אלגוריתם יעיל יותר.

6. דרכים להתגונן מפני Brute Force
	•	העלאת רמת המורכבות ואורך הסיסמאות.
	•	שימוש ב-CAPTCHA למניעת מתקפות אוטומטיות.
	•	הגבלת מספר ניסיונות הכניסה.
	•	שימוש באלגוריתמי הצפנה חזקים.

7. אלטרנטיבות ל-Brute Force

במקום להשתמש ב-Brute Force, אפשר להשתמש באלגוריתמים יעילים יותר לפתרון בעיות:
	•	תכנות דינמי (Dynamic Programming).
	•	אלגוריתמים חמדניים (Greedy Algorithms).
	•	שימוש במבני נתונים כמו עצים או טבלאות האש.

8. דוגמה בקוד

להלן דוגמת קוד פשוטה ב-Python שממחישה את עקרון הפעולה של Brute Force:

# ניסיון לפצח סיסמה בשיטת Brute Force
correct_password = "1234"
possible_characters = "0123456789"

def brute_force_password():
    from itertools import product
    for length in range(1, 5):  # בדיקת סיסמאות באורך 1 עד 4
        for attempt in product(possible_characters, repeat=length):
            attempt = "".join(attempt)
            print(f"Trying: {attempt}")
            if attempt == correct_password:
                return f"Password found: {attempt}"

print(brute_force_password())

הוספת קוד או דוגמאות רלוונטיות תהפוך את ההסבר לברור ונגיש יותר.




עקרון הפעולה של Brute Force

בשיטת Brute Force אנו מתמודדים עם בעיה על ידי ניסוי שיטתי של כל האפשרויות האפשריות. להלן פירוט ברור יותר על איך זה עובד:
	1.	יצירת כל הצירופים האפשריים
	•	בתהליך זה מייצרים רשימה של כל האפשרויות בהתאם לבעיה.
	•	לדוגמה, אם מדובר בניסיון לפצח סיסמה שאורכה 3 תווים, והסיסמה יכולה לכלול רק את הספרות 0–9, מייצרים את כל הצירופים האפשריים:

000, 001, 002, ..., 999


	2.	בדיקה שיטתית של כל צירוף
	•	כל צירוף נבדק האם הוא עונה על הקריטריונים או התנאים הנדרשים.
	•	אם נמצא צירוף שעונה על התנאים, התהליך מסתיים.
	3.	סיום תהליך לאחר מציאת פתרון או בדיקה מלאה
	•	אם התהליך מצא את הצירוף הנכון (לדוגמה, את הסיסמה), הוא עוצר מיד.
	•	אם נבדקו כל האפשרויות ולא נמצא פתרון, המסקנה היא שאין פתרון מתאים.

דוגמה מעשית:

נניח שאנחנו רוצים לגלות קוד בן 4 ספרות המורכב רק ממספרים בין 0 ל-9.
	•	שלב 1: התהליך יתחיל עם הצירוף הראשון: 0000.
	•	שלב 2: נבדוק אם הצירוף תואם לקוד הנכון.
	•	שלב 3: אם לא, נעבור לצירוף הבא: 0001, 0002, וכן הלאה.
	•	שלב 4: התהליך ימשיך עד שנגיע לצירוף הנכון או עד שכל הצירופים נבדקו.

יישום עקרון זה:

Brute Force מתאים במיוחד למצבים שבהם:
	•	אין ידע מוקדם על התשובה (למשל, סיסמאות).
	•	כל הצירופים ידועים מראש, אך אי אפשר להעריך מראש מה הפתרון הנכון.

חשוב לזכור:
למרות הפשטות, השיטה נהיית לא יעילה מאוד ככל שמספר האפשרויות גדל, ולכן נעדיף להשתמש בה רק במקרים שבהם מספר הצירופים קטן יחסית.




דוגמאות לשימושים בשיטת Brute Force

1. פריצה של סיסמאות
	•	איך זה עובד?
בשיטה זו התוקף מנסה לנחש סיסמה על ידי ניסוי כל הצירופים האפשריים של תווים (אותיות, מספרים, סימנים מיוחדים).
	•	לדוגמה: סיסמה באורך 4 תווים יכולה להיות 1234, abcd, או !@#$. התוקף ינסה את כל האפשרויות עד למציאת הסיסמה הנכונה.
	•	שימוש אמיתי:
במערכות עם סיסמאות פשוטות או קצרות, תוקפים עלולים להשתמש ב-Brute Force כדי לפרוץ לחשבון.

2. קריפטוגרפיה
	•	איך זה עובד?
Brute Force משמש לניסיון לפצח מפתחות הצפנה על ידי בדיקת כל המפתחות האפשריים עד שמוצאים את המפתח המתאים לפענוח ההודעה.
	•	לדוגמה: אם ההצפנה משתמשת במפתח בן 4 ביטים, יש 16 מפתחות אפשריים (0000, 0001, … 1111).
	•	שימוש אמיתי:
בעבר, אלגוריתמים חלשים כמו DES היו פגיעים למתקפות Brute Force בגלל גודל מפתח קטן. כיום אלגוריתמים מתקדמים משתמשים במפתחות ארוכים יותר כדי למנוע מתקפות כאלה.

3. פתרון בעיות מתמטיות
	•	איך זה עובד?
ניתן להשתמש ב-Brute Force כדי לפתור בעיות מתמטיות שבהן יש מספר סופי של פתרונות אפשריים.
	•	לדוגמה: מציאת מספרים שמקיימים משוואה מסוימת, כמו ￼ (משוואת פיתגורס). פשוט נבדוק את כל הצירופים האפשריים של ￼ עד למציאת פתרון.
	•	שימוש אמיתי:
בעיות מתמטיות מורכבות עם פתרונות לא ידועים עשויות להיפתר באמצעות Brute Force כשאין שיטות מתקדמות יותר.

4. בדיקות תוכנה (Testing)
	•	איך זה עובד?
בדיקות תוכנה אוטומטיות יכולות להשתמש בשיטה זו כדי לבדוק את התוכנה בכל התרחישים האפשריים.
	•	לדוגמה: אם יש פונקציה שמקבלת שני מספרים בין 1 ל-100, נבדוק את כל הזוגות האפשריים של מספרים כדי לוודא שהתוכנה מתפקדת נכון.
	•	שימוש אמיתי:
בעת בדיקת מערכות קריטיות, כמו מערכות בנקאיות או מערכות רכב, ניתן להשתמש ב-Brute Force כדי לוודא שאין באגים במקרים קיצוניים.

5. משחקים ופאזלים
	•	איך זה עובד?
Brute Force יכול לעזור בפתרון משחקים שבהם יש מספר סופי של מהלכים אפשריים.
	•	לדוגמה: פתרון קוביית רוביק על ידי בדיקת כל הצירופים האפשריים של סיבובים עד לפתרון.
	•	שימוש אמיתי:
בתחרויות מחשבים, משתמשים לעיתים ב-Brute Force כדי לכתוב פתרון פשוט למקרים עם נתונים קטנים.

סיכום:

למרות היעילות הנמוכה של Brute Force בבעיות גדולות, השיטה היא כלי בסיסי וחיוני בבעיות קטנות או כאשר אין פתרונות מתוחכמים זמינים.