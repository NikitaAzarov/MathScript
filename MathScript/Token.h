#pragma once
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

typedef enum TokenType {
    NUMBER, // [0-9]

    PLUS,   // +
    MINUS,  // -
    STAR,   // *
    SLASH,  // /
    LPAREN, // (
    RPAREN, // )
    TOKEN_EOF     // \0
 } TokenType;

typedef struct Token {
    TokenType type;
    char* value;
}Token;

Token* token_initialize(TokenType type, char* value);
void token_print(Token* token);

שבוע טוב חברים💚🐨
מבקשים שמי שיודע שיאחר מחר, יוסיף אותו לרשימה: 

רשימת מאחרים צפוניים:
טל וימסנר
רוני כהן
יעל שינה
נוי טדגי
אוהד מרמור
אורי מזרחי
עמית ישראל
תומר קניס
מיכאל

רשימת מאחרים דרומיים (אילתיים):
דוד מאור
קרין כהן

רשימת מאחרים כללי:
עידן גור
ליאור וידס
הראל
ניתאי


3.
- הגענו להחלטה שצריך לעשות התקפת סייבר על המפעלים הגרעיניים בנתאנז
- רשת סגורה 
- לא ניתן היה להשתמש בשיטות הפצה רגילות דרך האינטרנט
- הווירוס חדר למערכת באמצעות כונני USB.
- התחיל לפעול ב-2007.
- USB נגועים חוברו למחשבים בתוך הרשת, אולי בטעות או בכוונה להעברת נתונים בין מכשירים
- להתפשט ברשת המקומית, מדביק את כל המכשירים והמערכות הפגיעות.
- מראה כמה חשוב לקחת בחשבון את הגורם האנושי
- למה גם פה חשוב


נקודות לזכור למצגת:
	1.	האתגר המרכזי:
	•	המטרה הייתה לתקוף את המפעלים הגרעיניים בנתאנז, שהרשת שלהם סגורה ואינה מחוברת לאינטרנט.
	2.	פתרון ההפצה:
‏	•	Stuxnet תוכנן במיוחד כדי לתקוף רשתות סגורות.
	•	הווירוס הופץ דרך כונני USB נגועים, במקום בשיטות אינטרנטיות רגילות.
	3.	אופן החדירה:
	•	כונני USB חוברו למחשבים ברשת, ייתכן בטעות או בכוונה, ע”י עובדים שהעבירו נתונים בין מכשירים.
	•	לאחר חדירה למחשב אחד, הווירוס התפשט ברשת המקומית, מדביק מערכות פגיעות.
	4.	משמעות הגורם האנושי:
	•	השיטה מדגישה את החשיבות של ניהול סיכונים אנושיים בהגנת רשתות, גם במערכות מבודדות.
	•	זו אחת הסיבות להנחיות בצבא להימנע מחיבור דיסקונקים חיצוניים למחשבים מסווגים.

נקודות למצגת:

1. מה זה PLC ומה תפקידו?
‏	•	PLC (Programmable Logic Controller): מחשב המשמש לאוטומציה של תהליכים בצנטריפוגות.
	•	תפקידו: ניהול נתונים כמו טמפרטורה ומהירות של הצנטריפוגות.

‏2. Siemens Step 7 ומה תפקידו?
	•	תוכנה לאיסוף נתונים, בדיקות, והעלאת תוכנות ל-PLC.
	•	בניגוד לתוכנות כמו IntelliJ או PyCharm, Siemens Step 7 מתמקד בהרצת תוכנות על מכונות פיזיות (צנטריפוגות, רובוטים, מסועים).
	•	דמיון ל-Arduino:
‏	•	PLC = לוח Arduino (חומרה שמבצעת פקודות).
‏	•	Siemens Step 7 = IDE שמעלה לוגיקה לפעולה של PLC.

3. מה עשה Stuxnet ל-PLC?
	•	שינה את קוד ה-PLC כך:
	•	גרם לשינויים חדים במהירות הצנטריפוגות (פעם נמוכה, פעם גבוהה), שגרמו לשחיקה ולהרס שלהן.
	•	הסווה את הבעיה: יצר נתונים מזויפים שנראו תקינים, כך שהאיראנים לא הבחינו בבעיה.

4. מאפיינים ייחודיים של Stuxnet:
	•	צילום מסך: תיעד את כל תוכנות ההפעלה במחשבים של המתקן הגרעיני.
	•	מודולריות:
	•	פתוח לעדכוני גרסה, דבר שהפך אותו לכלי מתוחכם מאוד.
	•	הסוואה עצמית:
	•	ידע להשמיד את עצמו אוטומטית לאחר סיום המשימה, מה שהאט את זיהויו במערכת.

הצעה: תציג את ההסברים יחד עם תרשימים (למשל, PLC בתהליך אוטומציה או תרשים של פעולת Stuxnet).

נקודות למצגת:

1. השפעת Stuxnet על מודעות לאבטחת סייבר:
	•	לפני המתקפה: התקפות סייבר התמקדו בעיקר בגניבת מידע ולא גרמו לנזק פיזי.
	•	אחרי Stuxnet:
	•	חברות תעשייתיות (אנרגיה, תחבורה, מים, תעשיות ביטחוניות) התחילו להשקיע בהגנה מפני מתקפות סייבר שיכולות לגרום לנזק פיזי.

2. לוחמת סייבר - מעבר מגניבת מידע להרס פיזי:
	•	מדינות הבינו שלוחמת סייבר יכולה לגרום להרס ממשי במתקנים פיזיים.
	•	התגובה:
	•	השקעות מסיביות בפעולות סייבר התקפיות והגנתיות.
	•	דוגמאות: סין, רוסיה ומדינות באירופה הגדילו משמעותית את התקציבים לתחום.

3. ההשפעה על צה”ל ואופן הפעולה:
	•	צה”ל הפריד בין סייבר התקפי להגנתי:
	•	סייבר התקפי הועבר לאחריות אגף המודיעין.
	•	סייבר הגנתי: נפתח קורס מגן סייבר בבסמ”ח (דצמבר 2011).

הצעה: להוסיף תרשים זרימה או ציר זמן שמציג את ההשפעות והתגובות בעקבות Stuxnet בצורה ויזואלית.



Here’s the structure of a 20-minute presentation on the topic of the Stuxnet worm:

Slide 1: Title
	•	Topic: The Stuxnet Worm: History, Features, and Impact
	•	Subtitle: “A New Era of Cyberwarfare”
	•	Presenter’s Name and Date.

Slide 2: Introduction
	•	What is Stuxnet?
	•	A malicious computer worm designed for cyberattacks.
	•	Why is it important?
	•	Stuxnet was the first known cyberweapon to target and destroy physical infrastructure.
	•	Goals of the presentation:
	•	Explore the history, technical features, and consequences of Stuxnet.

Slide 3: History of Stuxnet
	•	Development and spread:
	•	Allegedly created by the U.S. and Israel (Operation “Olympic Games”).
	•	Emerged between 2009 and 2010.
	•	Target: Iran’s nuclear program (uranium enrichment facilities).
	•	Objective: Sabotage centrifuges at the Natanz facility.

Slide 4: How Stuxnet Works
	•	Attack vector:
	•	Initial penetration via USB drives.
	•	Exploitation of zero-day vulnerabilities in Windows.
	•	Target system:
	•	Siemens programmable logic controllers (PLCs).
	•	Mechanism:
	•	Modifies operational parameters of equipment, causing physical damage.

Slide 5: Technical Features
	•	Complexity:
	•	Written in multiple programming languages.
	•	Over 15,000 lines of code.
	•	Self-defense mechanisms:
	•	Ability to conceal its presence.
	•	Highly targeted to minimize collateral damage.
	•	Spread:
	•	Self-replicating through networks and devices.

Slide 6: Impact on Iran
	•	Effects of the attack:
	•	Approximately 1,000 centrifuges damaged.
	•	Delayed Iran’s nuclear program by several years.
	•	Iran’s response:
	•	Strengthened cybersecurity.
	•	Accelerated development of its own cyber capabilities.

Slide 7: Global Reaction
	•	Perception of Stuxnet:
	•	Seen as a turning point in cyberwarfare.
	•	Sparked ethical and legal debates.
	•	Rise of cyberweapons:
	•	Motivated other nations to develop cyber units.

Slide 8: Consequences for Cybersecurity
	•	Vulnerability of infrastructure:
	•	Industrial systems were unprepared for such attacks.
	•	Growth of cyberattacks:
	•	Inspired other malware like Duqu and Flame.
	•	Lessons for the IT industry:
	•	Increased focus on protecting critical infrastructure.

Slide 9: Ethics of Cyberweapons
	•	Key question:
	•	Is it ethical to develop programs capable of harming physical systems?
	•	Potential consequences:
	•	Escalation of conflicts.
	•	Risk of civilian casualties from cyberattacks.

Slide 10: Conclusion
	•	Key takeaways:
	•	Stuxnet marked the beginning of a new era in cyberwarfare.
	•	Demonstrated the power of cyberweapons and the vulnerability of modern systems.
	•	Discussion points:
	•	How can we prevent similar attacks in the future?

Extras:
	1.	Video animation: Show how Stuxnet disrupted centrifuges.
	2.	Infographic: Illustrate the worm’s path of infection.
	3.	Q&A: Leave 3–5 minutes for audience questions.

Let me know if you’d like help creating slides or expanding specific parts!



להלן מבנה מצגת של 20 דקות על נושא התולעת Stuxnet:

שקופית 1: כותרת
	•	נושא: תולעת Stuxnet: היסטוריה, מאפיינים והשפעות
	•	תת-כותרת: “עידן חדש של לוחמה קיברנטית”
	•	שם המציג ותאריך.

שקופית 2: מבוא
	•	מהי Stuxnet?
	•	תולעת זדונית שפותחה למתקפות סייבר.
	•	למה זה חשוב?
	•	Stuxnet הייתה הנשק הקיברנטי הראשון שנועד לפגוע בתשתיות פיזיות.
	•	מטרות המצגת:
	•	להכיר את ההיסטוריה, המאפיינים הטכניים וההשפעות של Stuxnet.

שקופית 3: ההיסטוריה של Stuxnet
	•	פיתוח והפצה:
	•	פותחה לכאורה על ידי ארה”ב וישראל (מבצע “משחקים אולימפיים”).
	•	הופיעה בין השנים 2009–2010.
	•	מטרה: תוכנית הגרעין האיראנית (מתקני העשרת אורניום).
	•	יעד: שיבוש פעילות הצנטריפוגות במתקן בנתנז.

שקופית 4: איך Stuxnet פועלת?
	•	וקטור התקיפה:
	•	חדירה ראשונית דרך כונני USB.
	•	ניצול חולשות אבטחה (“Zero-Day”) במערכת ההפעלה Windows.
	•	המערכת המותקפת:
	•	בקרי לוגיקה מתוכנתים (PLCs) של Siemens.
	•	מנגנון הפעולה:
	•	שינוי פרמטרים תפעוליים של הציוד שגורם לנזק פיזי.

שקופית 5: מאפיינים טכניים
	•	רמת מורכבות:
	•	נכתבה בשפות תכנות שונות.
	•	כוללת מעל 15,000 שורות קוד.
	•	מנגנוני הגנה עצמית:
	•	יכולת להסתיר את נוכחותה.
	•	תקיפה ממוקדת שמפחיתה נזק משני.
	•	יכולת הפצה:
	•	מתפשטת באופן עצמאי דרך רשתות ומכשירים.

שקופית 6: ההשפעה על איראן
	•	תוצאות המתקפה:
	•	כ-1,000 צנטריפוגות הושבתו.
	•	עיכוב תוכנית הגרעין האיראנית בכמה שנים.
	•	תגובת איראן:
	•	חיזוק אבטחת הסייבר.
	•	פיתוח מואץ של יכולות סייבר עצמאיות.

שקופית 7: תגובת העולם
	•	איך Stuxnet נתפסה:
	•	הוכרה כנקודת מפנה בלוחמה קיברנטית.
	•	עוררה דיונים אתיים ומשפטיים.
	•	עליית נשקי הסייבר:
	•	הניעה מדינות נוספות לפתח יחידות סייבר.

שקופית 8: השלכות על אבטחת הסייבר
	•	פגיעות התשתיות:
	•	מערכות תעשייתיות לא היו מוכנות למתקפות מסוג זה.
	•	גידול במתקפות סייבר:
	•	הולידה תולעים נוספות כמו Duqu ו-Flame.
	•	לקחים לתעשיית ה-IT:
	•	התמקדות רבה יותר בהגנה על תשתיות קריטיות.

שקופית 9: אתיקה של נשקי סייבר
	•	השאלה המרכזית:
	•	האם זה אתי לפתח תוכנות שעלולות לפגוע בתשתיות פיזיות?
	•	השלכות אפשריות:
	•	הסלמת עימותים.
	•	סיכון לפגיעה באזרחים כתוצאה ממתקפות סייבר.

שקופית 10: סיכום
	•	מסקנות עיקריות:
	•	Stuxnet סימנה את תחילתו של עידן חדש בלוחמה קיברנטית.
	•	הוכיחה את עוצמת נשקי הסייבר ואת פגיעות המערכות המודרניות.
	•	נקודות לדיון:
	•	איך ניתן למנוע מתקפות דומות בעתיד?

תוספות:
	1.	אנימציה ויזואלית: להציג כיצד Stuxnet פגעה בצנטריפוגות.
	2.	אינפוגרפיקה: המחשה של מסלול התפשטות התולעת.
	3.	שאלות ותשובות: להשאיר 3–5 דקות לשאלות מהקהל.

אם אתה צריך עזרה בהכנת השקופיות או הרחבה של חלק מסוים, תגיד לי!




- сумма времени в перемену по курсу
- кто самое много выходил и мало по времени 
- кто самое много выходил и мало по количеству выходов
- среднее по ученику
- среднее по курсу 

Самая длинная/короткая перемена каждого участника

Абсолютный рекорд продолжительности перемены среди всех.

Конечно, вот перевод:

1. הגדרה כללית
	•	Brute force (בעברית: “כוח גס”) הוא שיטה לפתרון בעיות או לביצוע התקפות המבוססת על ניסיון כל האפשרויות אחת אחרי השנייה.
	•	בתחום התכנות ואבטחת המידע, brute force משמש לעיתים קרובות לניסיון לפצח סיסמאות, מפתחות הצפנה או לפתור בעיות קומבינטוריות.

2. איך עובד brute force?
	•	האלגוריתם מנסה באופן שיטתי את כל הקומבינציות האפשריות של קלט (למשל, תווים בסיסמה).
	•	כשמדובר בנתונים בטווח קטן, brute force יכול להיות יעיל, אך עבור בעיות מורכבות היעילות שלו יורדת משמעותית עקב העלייה במספר האפשרויות.

3. יתרונות השיטה
	•	פשטות הביצוע: brute force דורש ידע מינימלי על הבעיה מעבר להבנת טווח האפשרויות.
	•	פתרון מובטח (תיאורטי): אם יש זמן ומשאבים בלתי מוגבלים, brute force ימצא בסופו של דבר את הפתרון הנכון.

4. חסרונות השיטה
	•	חוסר יעילות: זמן הביצוע גדל באופן אקספוננציאלי ככל שהבעיה נעשית מסובכת יותר.
	•	עלות גבוהה של משאבים: brute force דורש כוח מחשוב וזמן רבים.

5. דוגמאות לשימושים
	•	אבטחת מידע: התקפות על סיסמאות ומפתחות הצפנה (למשל, ניסיונות לפצח קוד PIN).
	•	תכנות: פתרון בעיות כמו “בעיית התרמיל” או חיפוש פתרונות במשחקי שחמט.
	•	קריפטוגרפיה: בדיקת עמידותם של אלגוריתמי הצפנה.

6. כיצד להתגונן מפני התקפות brute force
	•	שימוש בסיסמאות ארוכות ומורכבות (מגדיל את מספר הקומבינציות האפשריות).
	•	הגבלת מספר ניסיונות הכניסה (למשל, נעילת חשבון לאחר 3-5 ניסיונות שגויים).
	•	שימוש ב-CAPTCHA למניעת התקפות אוטומטיות.
	•	הטמעת אימות דו-שלבי (MFA).

7. חלופות ל-brute force
	•	אלגוריתמים חכמים יותר כמו אלגוריתמים חמדניים, תכנות דינמי או חיפוש עם חזרה לאחור (backtracking).
	•	שימוש בניתוח והיוריסטיקות לצמצום מרחב החיפוש.

8. עובדות מעניינות
	•	brute force אינו משמש רק תוקפים, אלא גם מומחי אבטחה לבדיקת עמידות של מערכות.
	•	התקפות brute force שהצליחו בעבר הדגישו את החשיבות של שימוש בסיסמאות מורכבות.

בהצלחה עם ההגשה שלך! אם תרצה דוגמא לקוד המראה איך brute force עובד, תוכל לבקש ואשמח לעזור.


מה זה Brute Force?

1. הגדרה של Brute Force

Brute Force (בעברית: “כוח גס”) הוא שיטה לפתרון בעיות שמתבססת על ניסוי כל האפשרויות הקיימות עד למציאת פתרון מתאים. שיטה זו נפוצה במיוחד בתכנות, קריפטוגרפיה ובדיקות תוכנה.

2. עקרון הפעולה

שיטת Brute Force עובדת כך:
	•	בדיקה של כל הצירופים האפשריים של נתוני הקלט.
	•	בחינה של כל צירוף האם הוא עונה על הדרישות.
	•	עצירה כאשר נמצא הפתרון או לאחר סיום הבדיקה של כל האפשרויות.

דוגמה: פריצה של סיסמה באמצעות Brute Force כוללת ניסיון של כל הצירופים האפשריים של תווים עד שמוצאים את הסיסמה הנכונה.

3. יתרונות
	•	פשוטה למימוש.
	•	מבטיחה מציאת פתרון אם קיים כזה.

4. חסרונות
	•	מורכבות חישובית גבוהה: זמן הביצוע גדל בצורה מעריכית ככל שמספר האפשרויות גדל.
	•	צריכת משאבים גבוהה (זמן ואנרגיה).
	•	לא יעילה בבעיות עם מספר גדול מאוד של אפשרויות.

5. שימושים נפוצים
	•	קריפטוגרפיה: שיטת Brute Force משמשת לניסיון לפצח מפתחות הצפנה (למשל, התקפה על אלגוריתמים חלשים).
	•	בדיקות תוכנה: השיטה משמשת למציאת באגים באמצעות בדיקת כל התרחישים האפשריים.
	•	פתרון בעיות בתכנות: לפעמים משתמשים ב-Brute Force כגישה בסיסית אם אין אלגוריתם יעיל יותר.

6. דרכים להתגונן מפני Brute Force
	•	העלאת רמת המורכבות ואורך הסיסמאות.
	•	שימוש ב-CAPTCHA למניעת מתקפות אוטומטיות.
	•	הגבלת מספר ניסיונות הכניסה.
	•	שימוש באלגוריתמי הצפנה חזקים.

7. אלטרנטיבות ל-Brute Force

במקום להשתמש ב-Brute Force, אפשר להשתמש באלגוריתמים יעילים יותר לפתרון בעיות:
	•	תכנות דינמי (Dynamic Programming).
	•	אלגוריתמים חמדניים (Greedy Algorithms).
	•	שימוש במבני נתונים כמו עצים או טבלאות האש.

8. דוגמה בקוד

להלן דוגמת קוד פשוטה ב-Python שממחישה את עקרון הפעולה של Brute Force:

# ניסיון לפצח סיסמה בשיטת Brute Force
correct_password = "1234"
possible_characters = "0123456789"

def brute_force_password():
    from itertools import product
    for length in range(1, 5):  # בדיקת סיסמאות באורך 1 עד 4
        for attempt in product(possible_characters, repeat=length):
            attempt = "".join(attempt)
            print(f"Trying: {attempt}")
            if attempt == correct_password:
                return f"Password found: {attempt}"

print(brute_force_password())

הוספת קוד או דוגמאות רלוונטיות תהפוך את ההסבר לברור ונגיש יותר.




עקרון הפעולה של Brute Force

בשיטת Brute Force אנו מתמודדים עם בעיה על ידי ניסוי שיטתי של כל האפשרויות האפשריות. להלן פירוט ברור יותר על איך זה עובד:
	1.	יצירת כל הצירופים האפשריים
	•	בתהליך זה מייצרים רשימה של כל האפשרויות בהתאם לבעיה.
	•	לדוגמה, אם מדובר בניסיון לפצח סיסמה שאורכה 3 תווים, והסיסמה יכולה לכלול רק את הספרות 0–9, מייצרים את כל הצירופים האפשריים:

000, 001, 002, ..., 999


	2.	בדיקה שיטתית של כל צירוף
	•	כל צירוף נבדק האם הוא עונה על הקריטריונים או התנאים הנדרשים.
	•	אם נמצא צירוף שעונה על התנאים, התהליך מסתיים.
	3.	סיום תהליך לאחר מציאת פתרון או בדיקה מלאה
	•	אם התהליך מצא את הצירוף הנכון (לדוגמה, את הסיסמה), הוא עוצר מיד.
	•	אם נבדקו כל האפשרויות ולא נמצא פתרון, המסקנה היא שאין פתרון מתאים.

דוגמה מעשית:

נניח שאנחנו רוצים לגלות קוד בן 4 ספרות המורכב רק ממספרים בין 0 ל-9.
	•	שלב 1: התהליך יתחיל עם הצירוף הראשון: 0000.
	•	שלב 2: נבדוק אם הצירוף תואם לקוד הנכון.
	•	שלב 3: אם לא, נעבור לצירוף הבא: 0001, 0002, וכן הלאה.
	•	שלב 4: התהליך ימשיך עד שנגיע לצירוף הנכון או עד שכל הצירופים נבדקו.

יישום עקרון זה:

Brute Force מתאים במיוחד למצבים שבהם:
	•	אין ידע מוקדם על התשובה (למשל, סיסמאות).
	•	כל הצירופים ידועים מראש, אך אי אפשר להעריך מראש מה הפתרון הנכון.

חשוב לזכור:
למרות הפשטות, השיטה נהיית לא יעילה מאוד ככל שמספר האפשרויות גדל, ולכן נעדיף להשתמש בה רק במקרים שבהם מספר הצירופים קטן יחסית.




דוגמאות לשימושים בשיטת Brute Force

1. פריצה של סיסמאות
	•	איך זה עובד?
בשיטה זו התוקף מנסה לנחש סיסמה על ידי ניסוי כל הצירופים האפשריים של תווים (אותיות, מספרים, סימנים מיוחדים).
	•	לדוגמה: סיסמה באורך 4 תווים יכולה להיות 1234, abcd, או !@#$. התוקף ינסה את כל האפשרויות עד למציאת הסיסמה הנכונה.
	•	שימוש אמיתי:
במערכות עם סיסמאות פשוטות או קצרות, תוקפים עלולים להשתמש ב-Brute Force כדי לפרוץ לחשבון.

2. קריפטוגרפיה
	•	איך זה עובד?
Brute Force משמש לניסיון לפצח מפתחות הצפנה על ידי בדיקת כל המפתחות האפשריים עד שמוצאים את המפתח המתאים לפענוח ההודעה.
	•	לדוגמה: אם ההצפנה משתמשת במפתח בן 4 ביטים, יש 16 מפתחות אפשריים (0000, 0001, … 1111).
	•	שימוש אמיתי:
בעבר, אלגוריתמים חלשים כמו DES היו פגיעים למתקפות Brute Force בגלל גודל מפתח קטן. כיום אלגוריתמים מתקדמים משתמשים במפתחות ארוכים יותר כדי למנוע מתקפות כאלה.

3. פתרון בעיות מתמטיות
	•	איך זה עובד?
ניתן להשתמש ב-Brute Force כדי לפתור בעיות מתמטיות שבהן יש מספר סופי של פתרונות אפשריים.
	•	לדוגמה: מציאת מספרים שמקיימים משוואה מסוימת, כמו ￼ (משוואת פיתגורס). פשוט נבדוק את כל הצירופים האפשריים של ￼ עד למציאת פתרון.
	•	שימוש אמיתי:
בעיות מתמטיות מורכבות עם פתרונות לא ידועים עשויות להיפתר באמצעות Brute Force כשאין שיטות מתקדמות יותר.

4. בדיקות תוכנה (Testing)
	•	איך זה עובד?
בדיקות תוכנה אוטומטיות יכולות להשתמש בשיטה זו כדי לבדוק את התוכנה בכל התרחישים האפשריים.
	•	לדוגמה: אם יש פונקציה שמקבלת שני מספרים בין 1 ל-100, נבדוק את כל הזוגות האפשריים של מספרים כדי לוודא שהתוכנה מתפקדת נכון.
	•	שימוש אמיתי:
בעת בדיקת מערכות קריטיות, כמו מערכות בנקאיות או מערכות רכב, ניתן להשתמש ב-Brute Force כדי לוודא שאין באגים במקרים קיצוניים.

5. משחקים ופאזלים
	•	איך זה עובד?
Brute Force יכול לעזור בפתרון משחקים שבהם יש מספר סופי של מהלכים אפשריים.
	•	לדוגמה: פתרון קוביית רוביק על ידי בדיקת כל הצירופים האפשריים של סיבובים עד לפתרון.
	•	שימוש אמיתי:
בתחרויות מחשבים, משתמשים לעיתים ב-Brute Force כדי לכתוב פתרון פשוט למקרים עם נתונים קטנים.

סיכום:

למרות היעילות הנמוכה של Brute Force בבעיות גדולות, השיטה היא כלי בסיסי וחיוני בבעיות קטנות או כאשר אין פתרונות מתוחכמים זמינים.










סיפורו של שיטת כוח גס (Brute Force) מתחיל בהתפתחות הקריפטוגרפיה והמחשוב. בשנות ה-40 של המאה ה-20, במהלך מלחמת העולם השנייה, פיצוח קוד ה”אניגמה” של הצבא הגרמני על ידי צוותו של אלן טיורינג בפארק בלצ’לי נחשב לאחד הדוגמאות הראשונות לשימוש בשיטה זו.

טיורינג וצוותו פיתחו מכונה אלקטרומכנית בשם “בומב”, שביצעה ניסיונות שיטתיים על מנת למצוא את מפתח ההצפנה של האניגמה. אף שזה לא היה כוח גס טהור (הם השתמשו באלגוריתמים חכמים לצמצום האפשרויות), זה הניח את היסודות לרעיון של ניסוי שיטתי ממוחשב.

עם הופעתם של מחשבים חזקים יותר, השיטה הפכה לכלי מרכזי בעולם אבטחת המידע, בעיקר לניסיון לפרוץ סיסמאות או לפענח הצפנות. כיום, כוח גס משמש הן תוקפים והן אנשי אבטחה לבדיקת עמידות של מערכות.






שיטת כוח גס (Brute Force) קיימת מאז שהתחילו להצפין מידע ולנסות לפצח קודים. אחד המקרים המפורסמים הראשונים היה במלחמת העולם השנייה, כשהצוות של אלן טיורינג פיצח את קוד “אניגמה” של הגרמנים. הם השתמשו במכונה מיוחדת שניסתה הרבה אפשרויות עד שמצאה את המפתח הנכון.

עם הזמן, כשהמחשבים הפכו לחזקים יותר, השיטה התחילה לשמש לניסיון לפרוץ סיסמאות או לפענח הצפנות. היום משתמשים בכוח גס גם כדי לבדוק עד כמה מערכות אבטחה חזקות, וגם לפריצות על ידי האקרים. השיטה פשוטה – לנסות את כל האפשרויות, עד שמצליחים.




“אניגמה” הייתה מכונת הצפנה שהנאצים השתמשו בה במלחמת העולם השנייה כדי לשלוח הודעות סודיות. היא נראתה כמו מכונת כתיבה, אבל בפנים היו גלגלים מסתובבים. כל פעם שלחצו על אות, המכונה החליפה אותה באות אחרת לפי קוד מסובך שהשתנה כל יום.

בהתחלה חשבו שאי אפשר לפענח את ההודעות, כי היו מיליוני אפשרויות לקודים. אבל בסוף, צוות של אלן טיורינג הצליח למצוא דרך לפצח את ההצפנה. זה עזר לבעלות הברית לגלות תוכניות סודיות של הנאצים ולהתקדם במלחמה.